// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: services/delivery/v1/trade_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveryTradeServiceClient is the client API for DeliveryTradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryTradeServiceClient interface {
	// Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
	ChangePositionMode(ctx context.Context, in *ChangePositionModeRequest, opts ...grpc.CallOption) (*ChangePositionModeResponse, error)
	// Send in a new order.
	NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*NewOrderResponse, error)
	// Cancel an active order.
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	// Order modify function, currently only LIMIT order modification is supported,
	// modified orders will be reordered in the match queue
	ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*ModifyOrderResponse, error)
	// Cancel All Open Orders
	CancelAllOpenOrders(ctx context.Context, in *CancelAllOpenOrdersRequest, opts ...grpc.CallOption) (*CancelAllOpenOrdersResponse, error)
	// Cancel all open orders of the specified symbol at the end of the specified countdown
	AutoCancelAllOpenOrder(ctx context.Context, in *AutoCancelAllOpenOrdersRequest, opts ...grpc.CallOption) (*AutoCancelAllOpenOrdersResponse, error)
	// Change user's initial leverage in the specific symbol market.
	// For Hedge Mode, LONG and SHORT positions of one symbol use
	// the same initial leverage and share a total notional value.
	ChangeInitialLeverage(ctx context.Context, in *ChangeInitialLeverageRequest, opts ...grpc.CallOption) (*ChangeInitialLeverageResponse, error)
	// Change user's margin type in the specific symbol market.
	/// For Hedge Mode, LONG and SHORT positions of
	// one symbol use the same margin type.
	// With ISOLATED margin type, margins of
	// the LONG and SHORT positions are isolated from each other.
	ChangeMarginType(ctx context.Context, in *ChangeMarginTypeRequest, opts ...grpc.CallOption) (*ChangeMarginTypeResponse, error)
	// Modify Isolated Position Margin
	ModifyIsolatedPositionMargin(ctx context.Context, in *ModifyIsolatedPositionMarginRequest, opts ...grpc.CallOption) (*ModifyIsolatedPositionMarginResponse, error)
}

type deliveryTradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryTradeServiceClient(cc grpc.ClientConnInterface) DeliveryTradeServiceClient {
	return &deliveryTradeServiceClient{cc}
}

func (c *deliveryTradeServiceClient) ChangePositionMode(ctx context.Context, in *ChangePositionModeRequest, opts ...grpc.CallOption) (*ChangePositionModeResponse, error) {
	out := new(ChangePositionModeResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/ChangePositionMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTradeServiceClient) NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*NewOrderResponse, error) {
	out := new(NewOrderResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTradeServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTradeServiceClient) ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*ModifyOrderResponse, error) {
	out := new(ModifyOrderResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/ModifyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTradeServiceClient) CancelAllOpenOrders(ctx context.Context, in *CancelAllOpenOrdersRequest, opts ...grpc.CallOption) (*CancelAllOpenOrdersResponse, error) {
	out := new(CancelAllOpenOrdersResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/CancelAllOpenOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTradeServiceClient) AutoCancelAllOpenOrder(ctx context.Context, in *AutoCancelAllOpenOrdersRequest, opts ...grpc.CallOption) (*AutoCancelAllOpenOrdersResponse, error) {
	out := new(AutoCancelAllOpenOrdersResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/AutoCancelAllOpenOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTradeServiceClient) ChangeInitialLeverage(ctx context.Context, in *ChangeInitialLeverageRequest, opts ...grpc.CallOption) (*ChangeInitialLeverageResponse, error) {
	out := new(ChangeInitialLeverageResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/ChangeInitialLeverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTradeServiceClient) ChangeMarginType(ctx context.Context, in *ChangeMarginTypeRequest, opts ...grpc.CallOption) (*ChangeMarginTypeResponse, error) {
	out := new(ChangeMarginTypeResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/ChangeMarginType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTradeServiceClient) ModifyIsolatedPositionMargin(ctx context.Context, in *ModifyIsolatedPositionMarginRequest, opts ...grpc.CallOption) (*ModifyIsolatedPositionMarginResponse, error) {
	out := new(ModifyIsolatedPositionMarginResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/ModifyIsolatedPositionMargin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryTradeServiceServer is the server API for DeliveryTradeService service.
// All implementations should embed UnimplementedDeliveryTradeServiceServer
// for forward compatibility
type DeliveryTradeServiceServer interface {
	// Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
	ChangePositionMode(context.Context, *ChangePositionModeRequest) (*ChangePositionModeResponse, error)
	// Send in a new order.
	NewOrder(context.Context, *NewOrderRequest) (*NewOrderResponse, error)
	// Cancel an active order.
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	// Order modify function, currently only LIMIT order modification is supported,
	// modified orders will be reordered in the match queue
	ModifyOrder(context.Context, *ModifyOrderRequest) (*ModifyOrderResponse, error)
	// Cancel All Open Orders
	CancelAllOpenOrders(context.Context, *CancelAllOpenOrdersRequest) (*CancelAllOpenOrdersResponse, error)
	// Cancel all open orders of the specified symbol at the end of the specified countdown
	AutoCancelAllOpenOrder(context.Context, *AutoCancelAllOpenOrdersRequest) (*AutoCancelAllOpenOrdersResponse, error)
	// Change user's initial leverage in the specific symbol market.
	// For Hedge Mode, LONG and SHORT positions of one symbol use
	// the same initial leverage and share a total notional value.
	ChangeInitialLeverage(context.Context, *ChangeInitialLeverageRequest) (*ChangeInitialLeverageResponse, error)
	// Change user's margin type in the specific symbol market.
	/// For Hedge Mode, LONG and SHORT positions of
	// one symbol use the same margin type.
	// With ISOLATED margin type, margins of
	// the LONG and SHORT positions are isolated from each other.
	ChangeMarginType(context.Context, *ChangeMarginTypeRequest) (*ChangeMarginTypeResponse, error)
	// Modify Isolated Position Margin
	ModifyIsolatedPositionMargin(context.Context, *ModifyIsolatedPositionMarginRequest) (*ModifyIsolatedPositionMarginResponse, error)
}

// UnimplementedDeliveryTradeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeliveryTradeServiceServer struct {
}

func (UnimplementedDeliveryTradeServiceServer) ChangePositionMode(context.Context, *ChangePositionModeRequest) (*ChangePositionModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePositionMode not implemented")
}
func (UnimplementedDeliveryTradeServiceServer) NewOrder(context.Context, *NewOrderRequest) (*NewOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}
func (UnimplementedDeliveryTradeServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedDeliveryTradeServiceServer) ModifyOrder(context.Context, *ModifyOrderRequest) (*ModifyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOrder not implemented")
}
func (UnimplementedDeliveryTradeServiceServer) CancelAllOpenOrders(context.Context, *CancelAllOpenOrdersRequest) (*CancelAllOpenOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAllOpenOrders not implemented")
}
func (UnimplementedDeliveryTradeServiceServer) AutoCancelAllOpenOrder(context.Context, *AutoCancelAllOpenOrdersRequest) (*AutoCancelAllOpenOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoCancelAllOpenOrder not implemented")
}
func (UnimplementedDeliveryTradeServiceServer) ChangeInitialLeverage(context.Context, *ChangeInitialLeverageRequest) (*ChangeInitialLeverageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInitialLeverage not implemented")
}
func (UnimplementedDeliveryTradeServiceServer) ChangeMarginType(context.Context, *ChangeMarginTypeRequest) (*ChangeMarginTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMarginType not implemented")
}
func (UnimplementedDeliveryTradeServiceServer) ModifyIsolatedPositionMargin(context.Context, *ModifyIsolatedPositionMarginRequest) (*ModifyIsolatedPositionMarginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyIsolatedPositionMargin not implemented")
}

// UnsafeDeliveryTradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryTradeServiceServer will
// result in compilation errors.
type UnsafeDeliveryTradeServiceServer interface {
	mustEmbedUnimplementedDeliveryTradeServiceServer()
}

func RegisterDeliveryTradeServiceServer(s grpc.ServiceRegistrar, srv DeliveryTradeServiceServer) {
	s.RegisterService(&DeliveryTradeService_ServiceDesc, srv)
}

func _DeliveryTradeService_ChangePositionMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePositionModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).ChangePositionMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/ChangePositionMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).ChangePositionMode(ctx, req.(*ChangePositionModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTradeService_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).NewOrder(ctx, req.(*NewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTradeService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTradeService_ModifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).ModifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/ModifyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).ModifyOrder(ctx, req.(*ModifyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTradeService_CancelAllOpenOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAllOpenOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).CancelAllOpenOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/CancelAllOpenOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).CancelAllOpenOrders(ctx, req.(*CancelAllOpenOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTradeService_AutoCancelAllOpenOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoCancelAllOpenOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).AutoCancelAllOpenOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/AutoCancelAllOpenOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).AutoCancelAllOpenOrder(ctx, req.(*AutoCancelAllOpenOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTradeService_ChangeInitialLeverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeInitialLeverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).ChangeInitialLeverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/ChangeInitialLeverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).ChangeInitialLeverage(ctx, req.(*ChangeInitialLeverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTradeService_ChangeMarginType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMarginTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).ChangeMarginType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/ChangeMarginType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).ChangeMarginType(ctx, req.(*ChangeMarginTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTradeService_ModifyIsolatedPositionMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyIsolatedPositionMarginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).ModifyIsolatedPositionMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/ModifyIsolatedPositionMargin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).ModifyIsolatedPositionMargin(ctx, req.(*ModifyIsolatedPositionMarginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryTradeService_ServiceDesc is the grpc.ServiceDesc for DeliveryTradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryTradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.delivery.v1.DeliveryTradeService",
	HandlerType: (*DeliveryTradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangePositionMode",
			Handler:    _DeliveryTradeService_ChangePositionMode_Handler,
		},
		{
			MethodName: "NewOrder",
			Handler:    _DeliveryTradeService_NewOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _DeliveryTradeService_CancelOrder_Handler,
		},
		{
			MethodName: "ModifyOrder",
			Handler:    _DeliveryTradeService_ModifyOrder_Handler,
		},
		{
			MethodName: "CancelAllOpenOrders",
			Handler:    _DeliveryTradeService_CancelAllOpenOrders_Handler,
		},
		{
			MethodName: "AutoCancelAllOpenOrder",
			Handler:    _DeliveryTradeService_AutoCancelAllOpenOrder_Handler,
		},
		{
			MethodName: "ChangeInitialLeverage",
			Handler:    _DeliveryTradeService_ChangeInitialLeverage_Handler,
		},
		{
			MethodName: "ChangeMarginType",
			Handler:    _DeliveryTradeService_ChangeMarginType_Handler,
		},
		{
			MethodName: "ModifyIsolatedPositionMargin",
			Handler:    _DeliveryTradeService_ModifyIsolatedPositionMargin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/delivery/v1/trade_service.proto",
}
