// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: services/delivery/v1/trade_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveryTradeServiceClient is the client API for DeliveryTradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryTradeServiceClient interface {
	// Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
	ChangePositionMode(ctx context.Context, in *ChangePositionModeRequest, opts ...grpc.CallOption) (*ChangePositionModeResponse, error)
	// Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
	GetPositionMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPositionModeResponse, error)
	// Send in a new order.
	NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*NewOrderResponse, error)
	// Cancel an active order.
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
}

type deliveryTradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryTradeServiceClient(cc grpc.ClientConnInterface) DeliveryTradeServiceClient {
	return &deliveryTradeServiceClient{cc}
}

func (c *deliveryTradeServiceClient) ChangePositionMode(ctx context.Context, in *ChangePositionModeRequest, opts ...grpc.CallOption) (*ChangePositionModeResponse, error) {
	out := new(ChangePositionModeResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/ChangePositionMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTradeServiceClient) GetPositionMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPositionModeResponse, error) {
	out := new(GetPositionModeResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/GetPositionMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTradeServiceClient) NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*NewOrderResponse, error) {
	out := new(NewOrderResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryTradeServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryTradeService/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryTradeServiceServer is the server API for DeliveryTradeService service.
// All implementations should embed UnimplementedDeliveryTradeServiceServer
// for forward compatibility
type DeliveryTradeServiceServer interface {
	// Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
	ChangePositionMode(context.Context, *ChangePositionModeRequest) (*ChangePositionModeResponse, error)
	// Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
	GetPositionMode(context.Context, *Empty) (*GetPositionModeResponse, error)
	// Send in a new order.
	NewOrder(context.Context, *NewOrderRequest) (*NewOrderResponse, error)
	// Cancel an active order.
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
}

// UnimplementedDeliveryTradeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeliveryTradeServiceServer struct {
}

func (UnimplementedDeliveryTradeServiceServer) ChangePositionMode(context.Context, *ChangePositionModeRequest) (*ChangePositionModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePositionMode not implemented")
}
func (UnimplementedDeliveryTradeServiceServer) GetPositionMode(context.Context, *Empty) (*GetPositionModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionMode not implemented")
}
func (UnimplementedDeliveryTradeServiceServer) NewOrder(context.Context, *NewOrderRequest) (*NewOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}
func (UnimplementedDeliveryTradeServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}

// UnsafeDeliveryTradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryTradeServiceServer will
// result in compilation errors.
type UnsafeDeliveryTradeServiceServer interface {
	mustEmbedUnimplementedDeliveryTradeServiceServer()
}

func RegisterDeliveryTradeServiceServer(s grpc.ServiceRegistrar, srv DeliveryTradeServiceServer) {
	s.RegisterService(&DeliveryTradeService_ServiceDesc, srv)
}

func _DeliveryTradeService_ChangePositionMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePositionModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).ChangePositionMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/ChangePositionMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).ChangePositionMode(ctx, req.(*ChangePositionModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTradeService_GetPositionMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).GetPositionMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/GetPositionMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).GetPositionMode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTradeService_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).NewOrder(ctx, req.(*NewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryTradeService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryTradeServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryTradeService/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryTradeServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryTradeService_ServiceDesc is the grpc.ServiceDesc for DeliveryTradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryTradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.delivery.v1.DeliveryTradeService",
	HandlerType: (*DeliveryTradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangePositionMode",
			Handler:    _DeliveryTradeService_ChangePositionMode_Handler,
		},
		{
			MethodName: "GetPositionMode",
			Handler:    _DeliveryTradeService_GetPositionMode_Handler,
		},
		{
			MethodName: "NewOrder",
			Handler:    _DeliveryTradeService_NewOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _DeliveryTradeService_CancelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/delivery/v1/trade_service.proto",
}
