// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: services/delivery/v1/common.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderSide int32

const (
	OrderSide_ORDER_SIDE_UNSPECIFIED OrderSide = 0
	OrderSide_BUY                    OrderSide = 1
	OrderSide_SELL                   OrderSide = 2
)

// Enum value maps for OrderSide.
var (
	OrderSide_name = map[int32]string{
		0: "ORDER_SIDE_UNSPECIFIED",
		1: "BUY",
		2: "SELL",
	}
	OrderSide_value = map[string]int32{
		"ORDER_SIDE_UNSPECIFIED": 0,
		"BUY":                    1,
		"SELL":                   2,
	}
)

func (x OrderSide) Enum() *OrderSide {
	p := new(OrderSide)
	*p = x
	return p
}

func (x OrderSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSide) Descriptor() protoreflect.EnumDescriptor {
	return file_services_delivery_v1_common_proto_enumTypes[0].Descriptor()
}

func (OrderSide) Type() protoreflect.EnumType {
	return &file_services_delivery_v1_common_proto_enumTypes[0]
}

func (x OrderSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSide.Descriptor instead.
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{0}
}

type PositionSide int32

const (
	PositionSide_BOTH  PositionSide = 0
	PositionSide_LONG  PositionSide = 1
	PositionSide_SHORT PositionSide = 2
)

// Enum value maps for PositionSide.
var (
	PositionSide_name = map[int32]string{
		0: "BOTH",
		1: "LONG",
		2: "SHORT",
	}
	PositionSide_value = map[string]int32{
		"BOTH":  0,
		"LONG":  1,
		"SHORT": 2,
	}
)

func (x PositionSide) Enum() *PositionSide {
	p := new(PositionSide)
	*p = x
	return p
}

func (x PositionSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionSide) Descriptor() protoreflect.EnumDescriptor {
	return file_services_delivery_v1_common_proto_enumTypes[1].Descriptor()
}

func (PositionSide) Type() protoreflect.EnumType {
	return &file_services_delivery_v1_common_proto_enumTypes[1]
}

func (x PositionSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionSide.Descriptor instead.
func (PositionSide) EnumDescriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{1}
}

type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED OrderType = 0
	OrderType_LIMIT                  OrderType = 1
	OrderType_MARKET                 OrderType = 2
	OrderType_STOP                   OrderType = 3
	OrderType_STOP_MARKET            OrderType = 4
	OrderType_TAKE_PROFIT            OrderType = 5
	OrderType_TAKE_PROFIT_MARKET     OrderType = 6
	OrderType_TRAILING_STOP_MARKET   OrderType = 7
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "LIMIT",
		2: "MARKET",
		3: "STOP",
		4: "STOP_MARKET",
		5: "TAKE_PROFIT",
		6: "TAKE_PROFIT_MARKET",
		7: "TRAILING_STOP_MARKET",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED": 0,
		"LIMIT":                  1,
		"MARKET":                 2,
		"STOP":                   3,
		"STOP_MARKET":            4,
		"TAKE_PROFIT":            5,
		"TAKE_PROFIT_MARKET":     6,
		"TRAILING_STOP_MARKET":   7,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_delivery_v1_common_proto_enumTypes[2].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_services_delivery_v1_common_proto_enumTypes[2]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{2}
}

type TimeInForce int32

const (
	TimeInForce_TIME_IN_FORCE_UNSPECIFIED TimeInForce = 0
	// Good till cancel
	TimeInForce_GTC TimeInForce = 1
	// Immediate or Cancel
	TimeInForce_IOC TimeInForce = 2
	// Fill or Kill
	TimeInForce_FOK TimeInForce = 3
	// Good till crossing
	TimeInForce_GTX TimeInForce = 4
)

// Enum value maps for TimeInForce.
var (
	TimeInForce_name = map[int32]string{
		0: "TIME_IN_FORCE_UNSPECIFIED",
		1: "GTC",
		2: "IOC",
		3: "FOK",
		4: "GTX",
	}
	TimeInForce_value = map[string]int32{
		"TIME_IN_FORCE_UNSPECIFIED": 0,
		"GTC":                       1,
		"IOC":                       2,
		"FOK":                       3,
		"GTX":                       4,
	}
)

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}

func (x TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_services_delivery_v1_common_proto_enumTypes[3].Descriptor()
}

func (TimeInForce) Type() protoreflect.EnumType {
	return &file_services_delivery_v1_common_proto_enumTypes[3]
}

func (x TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForce.Descriptor instead.
func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{3}
}

type WorkingType int32

const (
	WorkingType_WORKING_TYPE_UNSPECIFIED WorkingType = 0
	WorkingType_MARK_PRICE               WorkingType = 1
	WorkingType_CONTRACT_PRICE           WorkingType = 2
)

// Enum value maps for WorkingType.
var (
	WorkingType_name = map[int32]string{
		0: "WORKING_TYPE_UNSPECIFIED",
		1: "MARK_PRICE",
		2: "CONTRACT_PRICE",
	}
	WorkingType_value = map[string]int32{
		"WORKING_TYPE_UNSPECIFIED": 0,
		"MARK_PRICE":               1,
		"CONTRACT_PRICE":           2,
	}
)

func (x WorkingType) Enum() *WorkingType {
	p := new(WorkingType)
	*p = x
	return p
}

func (x WorkingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkingType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_delivery_v1_common_proto_enumTypes[4].Descriptor()
}

func (WorkingType) Type() protoreflect.EnumType {
	return &file_services_delivery_v1_common_proto_enumTypes[4]
}

func (x WorkingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkingType.Descriptor instead.
func (WorkingType) EnumDescriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{4}
}

type ResponseType int32

const (
	ResponseType_RESPONSE_TYPE_UNSPECIFIED ResponseType = 0
	ResponseType_ACK                       ResponseType = 1
	ResponseType_RESULT                    ResponseType = 2
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "RESPONSE_TYPE_UNSPECIFIED",
		1: "ACK",
		2: "RESULT",
	}
	ResponseType_value = map[string]int32{
		"RESPONSE_TYPE_UNSPECIFIED": 0,
		"ACK":                       1,
		"RESULT":                    2,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_delivery_v1_common_proto_enumTypes[5].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_services_delivery_v1_common_proto_enumTypes[5]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{5}
}

type OrderStatus int32

const (
	OrderStatus_ORDER_STATUS_UNSPECIFIED OrderStatus = 0
	OrderStatus_NEW                      OrderStatus = 1
	OrderStatus_PARTIALLY_FILLED         OrderStatus = 2
	OrderStatus_FILLED                   OrderStatus = 3
	OrderStatus_CANCELED                 OrderStatus = 4
	OrderStatus_EXPIRED                  OrderStatus = 5
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "ORDER_STATUS_UNSPECIFIED",
		1: "NEW",
		2: "PARTIALLY_FILLED",
		3: "FILLED",
		4: "CANCELED",
		5: "EXPIRED",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_UNSPECIFIED": 0,
		"NEW":                      1,
		"PARTIALLY_FILLED":         2,
		"FILLED":                   3,
		"CANCELED":                 4,
		"EXPIRED":                  5,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_services_delivery_v1_common_proto_enumTypes[6].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_services_delivery_v1_common_proto_enumTypes[6]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{6}
}

type MarginType int32

const (
	MarginType_MARGIN_TYPE_UNSPECIFIED MarginType = 0
	MarginType_ISOLATED                MarginType = 1
	MarginType_CROSSED                 MarginType = 2
)

// Enum value maps for MarginType.
var (
	MarginType_name = map[int32]string{
		0: "MARGIN_TYPE_UNSPECIFIED",
		1: "ISOLATED",
		2: "CROSSED",
	}
	MarginType_value = map[string]int32{
		"MARGIN_TYPE_UNSPECIFIED": 0,
		"ISOLATED":                1,
		"CROSSED":                 2,
	}
)

func (x MarginType) Enum() *MarginType {
	p := new(MarginType)
	*p = x
	return p
}

func (x MarginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarginType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_delivery_v1_common_proto_enumTypes[7].Descriptor()
}

func (MarginType) Type() protoreflect.EnumType {
	return &file_services_delivery_v1_common_proto_enumTypes[7]
}

func (x MarginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarginType.Descriptor instead.
func (MarginType) EnumDescriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{7}
}

type IncomeType int32

const (
	IncomeType_INCOME_TYPE_UNSPECIFIED IncomeType = 0
	IncomeType_TRANSFER                IncomeType = 1
	IncomeType_WELCOME_BONUS           IncomeType = 2
	IncomeType_FUNDING_FEE             IncomeType = 3
	IncomeType_REALIZED_PNL            IncomeType = 4
	IncomeType_COMMISSION              IncomeType = 5
	IncomeType_INSURANCE_CLEAR         IncomeType = 6
	IncomeType_DELIVERED_SETTELMENT    IncomeType = 7
)

// Enum value maps for IncomeType.
var (
	IncomeType_name = map[int32]string{
		0: "INCOME_TYPE_UNSPECIFIED",
		1: "TRANSFER",
		2: "WELCOME_BONUS",
		3: "FUNDING_FEE",
		4: "REALIZED_PNL",
		5: "COMMISSION",
		6: "INSURANCE_CLEAR",
		7: "DELIVERED_SETTELMENT",
	}
	IncomeType_value = map[string]int32{
		"INCOME_TYPE_UNSPECIFIED": 0,
		"TRANSFER":                1,
		"WELCOME_BONUS":           2,
		"FUNDING_FEE":             3,
		"REALIZED_PNL":            4,
		"COMMISSION":              5,
		"INSURANCE_CLEAR":         6,
		"DELIVERED_SETTELMENT":    7,
	}
)

func (x IncomeType) Enum() *IncomeType {
	p := new(IncomeType)
	*p = x
	return p
}

func (x IncomeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncomeType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_delivery_v1_common_proto_enumTypes[8].Descriptor()
}

func (IncomeType) Type() protoreflect.EnumType {
	return &file_services_delivery_v1_common_proto_enumTypes[8]
}

func (x IncomeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncomeType.Descriptor instead.
func (IncomeType) EnumDescriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{8}
}

type AutoCloseType int32

const (
	AutoCloseType_AUTO_CLOSE_TYPE_UNSPECIFIED AutoCloseType = 0
	AutoCloseType_LIQUIDATION                 AutoCloseType = 1
	AutoCloseType_ADL                         AutoCloseType = 2
)

// Enum value maps for AutoCloseType.
var (
	AutoCloseType_name = map[int32]string{
		0: "AUTO_CLOSE_TYPE_UNSPECIFIED",
		1: "LIQUIDATION",
		2: "ADL",
	}
	AutoCloseType_value = map[string]int32{
		"AUTO_CLOSE_TYPE_UNSPECIFIED": 0,
		"LIQUIDATION":                 1,
		"ADL":                         2,
	}
)

func (x AutoCloseType) Enum() *AutoCloseType {
	p := new(AutoCloseType)
	*p = x
	return p
}

func (x AutoCloseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutoCloseType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_delivery_v1_common_proto_enumTypes[9].Descriptor()
}

func (AutoCloseType) Type() protoreflect.EnumType {
	return &file_services_delivery_v1_common_proto_enumTypes[9]
}

func (x AutoCloseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutoCloseType.Descriptor instead.
func (AutoCloseType) EnumDescriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{9}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_delivery_v1_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_services_delivery_v1_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{0}
}

type PositionMargin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount       float64      `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Asset        string       `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Symbol       string       `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Time         float64      `protobuf:"fixed64,4,opt,name=time,proto3" json:"time,omitempty"`
	Type         int32        `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	PositionSide PositionSide `protobuf:"varint,6,opt,name=positionSide,proto3,enum=services.delivery.v1.PositionSide" json:"positionSide,omitempty"`
}

func (x *PositionMargin) Reset() {
	*x = PositionMargin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_delivery_v1_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionMargin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionMargin) ProtoMessage() {}

func (x *PositionMargin) ProtoReflect() protoreflect.Message {
	mi := &file_services_delivery_v1_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionMargin.ProtoReflect.Descriptor instead.
func (*PositionMargin) Descriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *PositionMargin) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PositionMargin) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *PositionMargin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *PositionMargin) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PositionMargin) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PositionMargin) GetPositionSide() PositionSide {
	if x != nil {
		return x.PositionSide
	}
	return PositionSide_BOTH
}

type OrderModifyHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmendmentId   int64      `protobuf:"varint,1,opt,name=amendmentId,proto3" json:"amendmentId,omitempty"`
	Symbol        string     `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Pair          string     `protobuf:"bytes,3,opt,name=pair,proto3" json:"pair,omitempty"`
	OrderId       int64      `protobuf:"varint,4,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ClientOrderId string     `protobuf:"bytes,5,opt,name=clientOrderId,proto3" json:"clientOrderId,omitempty"`
	Time          int64      `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	Amendment     *Amendment `protobuf:"bytes,7,opt,name=amendment,proto3" json:"amendment,omitempty"`
}

func (x *OrderModifyHistory) Reset() {
	*x = OrderModifyHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_delivery_v1_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderModifyHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderModifyHistory) ProtoMessage() {}

func (x *OrderModifyHistory) ProtoReflect() protoreflect.Message {
	mi := &file_services_delivery_v1_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderModifyHistory.ProtoReflect.Descriptor instead.
func (*OrderModifyHistory) Descriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *OrderModifyHistory) GetAmendmentId() int64 {
	if x != nil {
		return x.AmendmentId
	}
	return 0
}

func (x *OrderModifyHistory) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderModifyHistory) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *OrderModifyHistory) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderModifyHistory) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *OrderModifyHistory) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *OrderModifyHistory) GetAmendment() *Amendment {
	if x != nil {
		return x.Amendment
	}
	return nil
}

type Amendment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price   *History `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	OrigQty *History `protobuf:"bytes,2,opt,name=origQty,proto3" json:"origQty,omitempty"`
	Count   int32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Amendment) Reset() {
	*x = Amendment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_delivery_v1_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amendment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amendment) ProtoMessage() {}

func (x *Amendment) ProtoReflect() protoreflect.Message {
	mi := &file_services_delivery_v1_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amendment.ProtoReflect.Descriptor instead.
func (*Amendment) Descriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *Amendment) GetPrice() *History {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Amendment) GetOrigQty() *History {
	if x != nil {
		return x.OrigQty
	}
	return nil
}

func (x *Amendment) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before float64 `protobuf:"fixed64,1,opt,name=before,proto3" json:"before,omitempty"`
	After  float64 `protobuf:"fixed64,2,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_delivery_v1_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_services_delivery_v1_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *History) GetBefore() float64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *History) GetAfter() float64 {
	if x != nil {
		return x.After
	}
	return 0
}

type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountAlias       string  `protobuf:"bytes,1,opt,name=accountAlias,proto3" json:"accountAlias,omitempty"`
	Asset              string  `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Balance            float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
	WithdrawAvailable  float64 `protobuf:"fixed64,4,opt,name=withdrawAvailable,proto3" json:"withdrawAvailable,omitempty"`
	CrossWalletBalance float64 `protobuf:"fixed64,5,opt,name=crossWalletBalance,proto3" json:"crossWalletBalance,omitempty"`
	CrossUnPnl         float64 `protobuf:"fixed64,6,opt,name=crossUnPnl,proto3" json:"crossUnPnl,omitempty"`
	AvailableBalance   float64 `protobuf:"fixed64,7,opt,name=availableBalance,proto3" json:"availableBalance,omitempty"`
	UpdateTime         int64   `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_delivery_v1_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_services_delivery_v1_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *Balance) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *Balance) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Balance) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Balance) GetWithdrawAvailable() float64 {
	if x != nil {
		return x.WithdrawAvailable
	}
	return 0
}

func (x *Balance) GetCrossWalletBalance() float64 {
	if x != nil {
		return x.CrossWalletBalance
	}
	return 0
}

func (x *Balance) GetCrossUnPnl() float64 {
	if x != nil {
		return x.CrossUnPnl
	}
	return 0
}

func (x *Balance) GetAvailableBalance() float64 {
	if x != nil {
		return x.AvailableBalance
	}
	return 0
}

func (x *Balance) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string       `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PositionAmt      int64        `protobuf:"varint,2,opt,name=positionAmt,proto3" json:"positionAmt,omitempty"`
	EntryPrice       float64      `protobuf:"fixed64,3,opt,name=entryPrice,proto3" json:"entryPrice,omitempty"`
	MarkPrice        float64      `protobuf:"fixed64,4,opt,name=markPrice,proto3" json:"markPrice,omitempty"`
	UnRealizedProfit float64      `protobuf:"fixed64,5,opt,name=unRealizedProfit,proto3" json:"unRealizedProfit,omitempty"`
	LiquidationPrice int64        `protobuf:"varint,6,opt,name=liquidationPrice,proto3" json:"liquidationPrice,omitempty"`
	Leverage         int32        `protobuf:"varint,7,opt,name=leverage,proto3" json:"leverage,omitempty"`
	MaxQty           int64        `protobuf:"varint,8,opt,name=maxQty,proto3" json:"maxQty,omitempty"`
	MarginType       MarginType   `protobuf:"varint,9,opt,name=marginType,proto3,enum=services.delivery.v1.MarginType" json:"marginType,omitempty"`
	IsolatedMargin   float64      `protobuf:"fixed64,10,opt,name=isolatedMargin,proto3" json:"isolatedMargin,omitempty"`
	IsAutoAddMargin  bool         `protobuf:"varint,11,opt,name=isAutoAddMargin,proto3" json:"isAutoAddMargin,omitempty"`
	PositionSide     PositionSide `protobuf:"varint,12,opt,name=positionSide,proto3,enum=services.delivery.v1.PositionSide" json:"positionSide,omitempty"`
	UpdateTime       int64        `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_delivery_v1_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_services_delivery_v1_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *Position) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Position) GetPositionAmt() int64 {
	if x != nil {
		return x.PositionAmt
	}
	return 0
}

func (x *Position) GetEntryPrice() float64 {
	if x != nil {
		return x.EntryPrice
	}
	return 0
}

func (x *Position) GetMarkPrice() float64 {
	if x != nil {
		return x.MarkPrice
	}
	return 0
}

func (x *Position) GetUnRealizedProfit() float64 {
	if x != nil {
		return x.UnRealizedProfit
	}
	return 0
}

func (x *Position) GetLiquidationPrice() int64 {
	if x != nil {
		return x.LiquidationPrice
	}
	return 0
}

func (x *Position) GetLeverage() int32 {
	if x != nil {
		return x.Leverage
	}
	return 0
}

func (x *Position) GetMaxQty() int64 {
	if x != nil {
		return x.MaxQty
	}
	return 0
}

func (x *Position) GetMarginType() MarginType {
	if x != nil {
		return x.MarginType
	}
	return MarginType_MARGIN_TYPE_UNSPECIFIED
}

func (x *Position) GetIsolatedMargin() float64 {
	if x != nil {
		return x.IsolatedMargin
	}
	return 0
}

func (x *Position) GetIsAutoAddMargin() bool {
	if x != nil {
		return x.IsAutoAddMargin
	}
	return false
}

func (x *Position) GetPositionSide() PositionSide {
	if x != nil {
		return x.PositionSide
	}
	return PositionSide_BOTH
}

func (x *Position) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type BatchOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string       `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Side             OrderSide    `protobuf:"varint,2,opt,name=side,proto3,enum=services.delivery.v1.OrderSide" json:"side,omitempty"`
	PositionSide     PositionSide `protobuf:"varint,3,opt,name=positionSide,proto3,enum=services.delivery.v1.PositionSide" json:"positionSide,omitempty"`
	Type             OrderType    `protobuf:"varint,4,opt,name=type,proto3,enum=services.delivery.v1.OrderType" json:"type,omitempty"`
	Quantity         string       `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	ReduceOnly       string       `protobuf:"bytes,6,opt,name=reduceOnly,proto3" json:"reduceOnly,omitempty"`
	Price            string       `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
	NewClientOrderId string       `protobuf:"bytes,8,opt,name=newClientOrderId,proto3" json:"newClientOrderId,omitempty"`
	StopPrice        string       `protobuf:"bytes,9,opt,name=stopPrice,proto3" json:"stopPrice,omitempty"`
	ClosePosition    string       `protobuf:"bytes,10,opt,name=closePosition,proto3" json:"closePosition,omitempty"`
	ActivationPrice  string       `protobuf:"bytes,11,opt,name=activationPrice,proto3" json:"activationPrice,omitempty"`
	CallbackRate     string       `protobuf:"bytes,12,opt,name=callbackRate,proto3" json:"callbackRate,omitempty"`
	WorkingType      WorkingType  `protobuf:"varint,13,opt,name=workingType,proto3,enum=services.delivery.v1.WorkingType" json:"workingType,omitempty"`
	PriceProtect     string       `protobuf:"bytes,14,opt,name=priceProtect,proto3" json:"priceProtect,omitempty"`
	NewOrderRespType ResponseType `protobuf:"varint,15,opt,name=newOrderRespType,proto3,enum=services.delivery.v1.ResponseType" json:"newOrderRespType,omitempty"`
	TimeInForce      TimeInForce  `protobuf:"varint,16,opt,name=timeInForce,proto3,enum=services.delivery.v1.TimeInForce" json:"timeInForce,omitempty"`
}

func (x *BatchOrders) Reset() {
	*x = BatchOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_delivery_v1_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOrders) ProtoMessage() {}

func (x *BatchOrders) ProtoReflect() protoreflect.Message {
	mi := &file_services_delivery_v1_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOrders.ProtoReflect.Descriptor instead.
func (*BatchOrders) Descriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{7}
}

func (x *BatchOrders) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BatchOrders) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_ORDER_SIDE_UNSPECIFIED
}

func (x *BatchOrders) GetPositionSide() PositionSide {
	if x != nil {
		return x.PositionSide
	}
	return PositionSide_BOTH
}

func (x *BatchOrders) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *BatchOrders) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *BatchOrders) GetReduceOnly() string {
	if x != nil {
		return x.ReduceOnly
	}
	return ""
}

func (x *BatchOrders) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *BatchOrders) GetNewClientOrderId() string {
	if x != nil {
		return x.NewClientOrderId
	}
	return ""
}

func (x *BatchOrders) GetStopPrice() string {
	if x != nil {
		return x.StopPrice
	}
	return ""
}

func (x *BatchOrders) GetClosePosition() string {
	if x != nil {
		return x.ClosePosition
	}
	return ""
}

func (x *BatchOrders) GetActivationPrice() string {
	if x != nil {
		return x.ActivationPrice
	}
	return ""
}

func (x *BatchOrders) GetCallbackRate() string {
	if x != nil {
		return x.CallbackRate
	}
	return ""
}

func (x *BatchOrders) GetWorkingType() WorkingType {
	if x != nil {
		return x.WorkingType
	}
	return WorkingType_WORKING_TYPE_UNSPECIFIED
}

func (x *BatchOrders) GetPriceProtect() string {
	if x != nil {
		return x.PriceProtect
	}
	return ""
}

func (x *BatchOrders) GetNewOrderRespType() ResponseType {
	if x != nil {
		return x.NewOrderRespType
	}
	return ResponseType_RESPONSE_TYPE_UNSPECIFIED
}

func (x *BatchOrders) GetTimeInForce() TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForce_TIME_IN_FORCE_UNSPECIFIED
}

type ModifyBatchOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId           int64     `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	OrigClientOrderId string    `protobuf:"bytes,2,opt,name=origClientOrderId,proto3" json:"origClientOrderId,omitempty"`
	Symbol            string    `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Side              OrderSide `protobuf:"varint,4,opt,name=side,proto3,enum=services.delivery.v1.OrderSide" json:"side,omitempty"`
	Quantity          float64   `protobuf:"fixed64,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price             float64   `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	RecvWindow        int64     `protobuf:"varint,7,opt,name=recvWindow,proto3" json:"recvWindow,omitempty"`
}

func (x *ModifyBatchOrders) Reset() {
	*x = ModifyBatchOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_delivery_v1_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyBatchOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyBatchOrders) ProtoMessage() {}

func (x *ModifyBatchOrders) ProtoReflect() protoreflect.Message {
	mi := &file_services_delivery_v1_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyBatchOrders.ProtoReflect.Descriptor instead.
func (*ModifyBatchOrders) Descriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{8}
}

func (x *ModifyBatchOrders) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ModifyBatchOrders) GetOrigClientOrderId() string {
	if x != nil {
		return x.OrigClientOrderId
	}
	return ""
}

func (x *ModifyBatchOrders) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ModifyBatchOrders) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_ORDER_SIDE_UNSPECIFIED
}

func (x *ModifyBatchOrders) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ModifyBatchOrders) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ModifyBatchOrders) GetRecvWindow() int64 {
	if x != nil {
		return x.RecvWindow
	}
	return 0
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset                  string  `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	WalletBalance          float64 `protobuf:"fixed64,2,opt,name=walletBalance,proto3" json:"walletBalance,omitempty"`
	UnrealizedProfit       float64 `protobuf:"fixed64,3,opt,name=unrealizedProfit,proto3" json:"unrealizedProfit,omitempty"`
	MarginBalance          float64 `protobuf:"fixed64,4,opt,name=marginBalance,proto3" json:"marginBalance,omitempty"`
	MaintMargin            float64 `protobuf:"fixed64,5,opt,name=maintMargin,proto3" json:"maintMargin,omitempty"`
	InitialMargin          float64 `protobuf:"fixed64,6,opt,name=initialMargin,proto3" json:"initialMargin,omitempty"`
	PositionInitialMargin  float64 `protobuf:"fixed64,7,opt,name=positionInitialMargin,proto3" json:"positionInitialMargin,omitempty"`
	OpenOrderInitialMargin float64 `protobuf:"fixed64,8,opt,name=openOrderInitialMargin,proto3" json:"openOrderInitialMargin,omitempty"`
	MaxWithdrawAmount      float64 `protobuf:"fixed64,9,opt,name=maxWithdrawAmount,proto3" json:"maxWithdrawAmount,omitempty"`
	CrossWalletBalance     float64 `protobuf:"fixed64,10,opt,name=crossWalletBalance,proto3" json:"crossWalletBalance,omitempty"`
	CrossUnPnl             float64 `protobuf:"fixed64,11,opt,name=crossUnPnl,proto3" json:"crossUnPnl,omitempty"`
	AvailableBalance       float64 `protobuf:"fixed64,12,opt,name=availableBalance,proto3" json:"availableBalance,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_delivery_v1_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_services_delivery_v1_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{9}
}

func (x *Asset) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Asset) GetWalletBalance() float64 {
	if x != nil {
		return x.WalletBalance
	}
	return 0
}

func (x *Asset) GetUnrealizedProfit() float64 {
	if x != nil {
		return x.UnrealizedProfit
	}
	return 0
}

func (x *Asset) GetMarginBalance() float64 {
	if x != nil {
		return x.MarginBalance
	}
	return 0
}

func (x *Asset) GetMaintMargin() float64 {
	if x != nil {
		return x.MaintMargin
	}
	return 0
}

func (x *Asset) GetInitialMargin() float64 {
	if x != nil {
		return x.InitialMargin
	}
	return 0
}

func (x *Asset) GetPositionInitialMargin() float64 {
	if x != nil {
		return x.PositionInitialMargin
	}
	return 0
}

func (x *Asset) GetOpenOrderInitialMargin() float64 {
	if x != nil {
		return x.OpenOrderInitialMargin
	}
	return 0
}

func (x *Asset) GetMaxWithdrawAmount() float64 {
	if x != nil {
		return x.MaxWithdrawAmount
	}
	return 0
}

func (x *Asset) GetCrossWalletBalance() float64 {
	if x != nil {
		return x.CrossWalletBalance
	}
	return 0
}

func (x *Asset) GetCrossUnPnl() float64 {
	if x != nil {
		return x.CrossUnPnl
	}
	return 0
}

func (x *Asset) GetAvailableBalance() float64 {
	if x != nil {
		return x.AvailableBalance
	}
	return 0
}

type AccountTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol          string       `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Id              int64        `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	OrderId         int64        `protobuf:"varint,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Pair            string       `protobuf:"bytes,4,opt,name=pair,proto3" json:"pair,omitempty"`
	Side            OrderSide    `protobuf:"varint,5,opt,name=side,proto3,enum=services.delivery.v1.OrderSide" json:"side,omitempty"`
	Price           float64      `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Qty             float64      `protobuf:"fixed64,7,opt,name=qty,proto3" json:"qty,omitempty"`
	RealizedPnl     float64      `protobuf:"fixed64,8,opt,name=realizedPnl,proto3" json:"realizedPnl,omitempty"`
	MarginAsset     string       `protobuf:"bytes,9,opt,name=marginAsset,proto3" json:"marginAsset,omitempty"`
	BaseQty         float64      `protobuf:"fixed64,10,opt,name=baseQty,proto3" json:"baseQty,omitempty"`
	Commission      float64      `protobuf:"fixed64,11,opt,name=commission,proto3" json:"commission,omitempty"`
	CommissionAsset string       `protobuf:"bytes,12,opt,name=commissionAsset,proto3" json:"commissionAsset,omitempty"`
	Time            int64        `protobuf:"varint,13,opt,name=time,proto3" json:"time,omitempty"`
	PositionSide    PositionSide `protobuf:"varint,14,opt,name=positionSide,proto3,enum=services.delivery.v1.PositionSide" json:"positionSide,omitempty"`
	Buyer           bool         `protobuf:"varint,15,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Maker           bool         `protobuf:"varint,16,opt,name=maker,proto3" json:"maker,omitempty"`
}

func (x *AccountTrade) Reset() {
	*x = AccountTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_delivery_v1_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTrade) ProtoMessage() {}

func (x *AccountTrade) ProtoReflect() protoreflect.Message {
	mi := &file_services_delivery_v1_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTrade.ProtoReflect.Descriptor instead.
func (*AccountTrade) Descriptor() ([]byte, []int) {
	return file_services_delivery_v1_common_proto_rawDescGZIP(), []int{10}
}

func (x *AccountTrade) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AccountTrade) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountTrade) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *AccountTrade) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *AccountTrade) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_ORDER_SIDE_UNSPECIFIED
}

func (x *AccountTrade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AccountTrade) GetQty() float64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *AccountTrade) GetRealizedPnl() float64 {
	if x != nil {
		return x.RealizedPnl
	}
	return 0
}

func (x *AccountTrade) GetMarginAsset() string {
	if x != nil {
		return x.MarginAsset
	}
	return ""
}

func (x *AccountTrade) GetBaseQty() float64 {
	if x != nil {
		return x.BaseQty
	}
	return 0
}

func (x *AccountTrade) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *AccountTrade) GetCommissionAsset() string {
	if x != nil {
		return x.CommissionAsset
	}
	return ""
}

func (x *AccountTrade) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AccountTrade) GetPositionSide() PositionSide {
	if x != nil {
		return x.PositionSide
	}
	return PositionSide_BOTH
}

func (x *AccountTrade) GetBuyer() bool {
	if x != nil {
		return x.Buyer
	}
	return false
}

func (x *AccountTrade) GetMaker() bool {
	if x != nil {
		return x.Maker
	}
	return false
}

var File_services_delivery_v1_common_proto protoreflect.FileDescriptor

var file_services_delivery_v1_common_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x0c, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x12,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x09, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x51, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x51, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xa7,
	0x02, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x55, 0x6e, 0x50, 0x6e, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x55, 0x6e, 0x50, 0x6e, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x04, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x51, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x51, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x64,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x41, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x46, 0x0a,
	0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe5, 0x05, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x33, 0x0a,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x77,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x43, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xfa, 0x01,
	0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x6f, 0x72, 0x69, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x76, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x76, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0xf5, 0x03, 0x0a, 0x05, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x36, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x55,
	0x6e, 0x50, 0x6e, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x55, 0x6e, 0x50, 0x6e, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xf1, 0x03, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x50, 0x6e, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x51, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x73,
	0x65, 0x51, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2a, 0x3a, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c,
	0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10,
	0x02, 0x2a, 0x9c, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x10, 0x05, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x07,
	0x2a, 0x50, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x47, 0x54, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x43, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x46, 0x4f, 0x4b, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x58,
	0x10, 0x04, 0x2a, 0x4f, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x10, 0x02, 0x2a, 0x42, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x2a, 0x71, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x44, 0x0a, 0x0a, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x52, 0x47,
	0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0xac, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x45,
	0x4c, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x50, 0x4e, 0x4c, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x45, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x2a,
	0x4a, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x4c, 0x10, 0x02, 0x42, 0x40, 0x5a, 0x3e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x39, 0x38, 0x39, 0x36, 0x2f,
	0x62, 0x69, 0x6e, 0x67, 0x6f, 0x2d, 0x70, 0x6b, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_delivery_v1_common_proto_rawDescOnce sync.Once
	file_services_delivery_v1_common_proto_rawDescData = file_services_delivery_v1_common_proto_rawDesc
)

func file_services_delivery_v1_common_proto_rawDescGZIP() []byte {
	file_services_delivery_v1_common_proto_rawDescOnce.Do(func() {
		file_services_delivery_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_delivery_v1_common_proto_rawDescData)
	})
	return file_services_delivery_v1_common_proto_rawDescData
}

var file_services_delivery_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_services_delivery_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_services_delivery_v1_common_proto_goTypes = []interface{}{
	(OrderSide)(0),             // 0: services.delivery.v1.OrderSide
	(PositionSide)(0),          // 1: services.delivery.v1.PositionSide
	(OrderType)(0),             // 2: services.delivery.v1.OrderType
	(TimeInForce)(0),           // 3: services.delivery.v1.TimeInForce
	(WorkingType)(0),           // 4: services.delivery.v1.WorkingType
	(ResponseType)(0),          // 5: services.delivery.v1.ResponseType
	(OrderStatus)(0),           // 6: services.delivery.v1.OrderStatus
	(MarginType)(0),            // 7: services.delivery.v1.MarginType
	(IncomeType)(0),            // 8: services.delivery.v1.IncomeType
	(AutoCloseType)(0),         // 9: services.delivery.v1.AutoCloseType
	(*Empty)(nil),              // 10: services.delivery.v1.Empty
	(*PositionMargin)(nil),     // 11: services.delivery.v1.PositionMargin
	(*OrderModifyHistory)(nil), // 12: services.delivery.v1.OrderModifyHistory
	(*Amendment)(nil),          // 13: services.delivery.v1.Amendment
	(*History)(nil),            // 14: services.delivery.v1.History
	(*Balance)(nil),            // 15: services.delivery.v1.Balance
	(*Position)(nil),           // 16: services.delivery.v1.Position
	(*BatchOrders)(nil),        // 17: services.delivery.v1.BatchOrders
	(*ModifyBatchOrders)(nil),  // 18: services.delivery.v1.ModifyBatchOrders
	(*Asset)(nil),              // 19: services.delivery.v1.Asset
	(*AccountTrade)(nil),       // 20: services.delivery.v1.AccountTrade
}
var file_services_delivery_v1_common_proto_depIdxs = []int32{
	1,  // 0: services.delivery.v1.PositionMargin.positionSide:type_name -> services.delivery.v1.PositionSide
	13, // 1: services.delivery.v1.OrderModifyHistory.amendment:type_name -> services.delivery.v1.Amendment
	14, // 2: services.delivery.v1.Amendment.price:type_name -> services.delivery.v1.History
	14, // 3: services.delivery.v1.Amendment.origQty:type_name -> services.delivery.v1.History
	7,  // 4: services.delivery.v1.Position.marginType:type_name -> services.delivery.v1.MarginType
	1,  // 5: services.delivery.v1.Position.positionSide:type_name -> services.delivery.v1.PositionSide
	0,  // 6: services.delivery.v1.BatchOrders.side:type_name -> services.delivery.v1.OrderSide
	1,  // 7: services.delivery.v1.BatchOrders.positionSide:type_name -> services.delivery.v1.PositionSide
	2,  // 8: services.delivery.v1.BatchOrders.type:type_name -> services.delivery.v1.OrderType
	4,  // 9: services.delivery.v1.BatchOrders.workingType:type_name -> services.delivery.v1.WorkingType
	5,  // 10: services.delivery.v1.BatchOrders.newOrderRespType:type_name -> services.delivery.v1.ResponseType
	3,  // 11: services.delivery.v1.BatchOrders.timeInForce:type_name -> services.delivery.v1.TimeInForce
	0,  // 12: services.delivery.v1.ModifyBatchOrders.side:type_name -> services.delivery.v1.OrderSide
	0,  // 13: services.delivery.v1.AccountTrade.side:type_name -> services.delivery.v1.OrderSide
	1,  // 14: services.delivery.v1.AccountTrade.positionSide:type_name -> services.delivery.v1.PositionSide
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_services_delivery_v1_common_proto_init() }
func file_services_delivery_v1_common_proto_init() {
	if File_services_delivery_v1_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_delivery_v1_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_delivery_v1_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionMargin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_delivery_v1_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderModifyHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_delivery_v1_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amendment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_delivery_v1_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_delivery_v1_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_delivery_v1_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_delivery_v1_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_delivery_v1_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyBatchOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_delivery_v1_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_delivery_v1_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_delivery_v1_common_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_services_delivery_v1_common_proto_goTypes,
		DependencyIndexes: file_services_delivery_v1_common_proto_depIdxs,
		EnumInfos:         file_services_delivery_v1_common_proto_enumTypes,
		MessageInfos:      file_services_delivery_v1_common_proto_msgTypes,
	}.Build()
	File_services_delivery_v1_common_proto = out.File
	file_services_delivery_v1_common_proto_rawDesc = nil
	file_services_delivery_v1_common_proto_goTypes = nil
	file_services_delivery_v1_common_proto_depIdxs = nil
}
