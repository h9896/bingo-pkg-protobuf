// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: services/delivery/v1/user_data_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveryUserDataServiceClient is the client API for DeliveryUserDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryUserDataServiceClient interface {
	// Get order modification history
	GetOrderModifyHistory(ctx context.Context, in *GetOrderModifyHistoryRequest, opts ...grpc.CallOption) (*GetOrderModifyHistoryResponse, error)
	// Check an order's status
	QueryOrder(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error)
	// Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
	GetPositionMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPositionModeResponse, error)
	// Query Current Open Order
	QueryCurrentOpenOrder(ctx context.Context, in *QueryCurrentOpenOrderRequest, opts ...grpc.CallOption) (*QueryCurrentOpenOrderResponse, error)
	// Get all open orders on a symbol.
	// Careful when accessing this with no symbol.
	CurrentAllOpenOrders(ctx context.Context, in *CurrentAllOpenOrdersRequest, opts ...grpc.CallOption) (*CurrentAllOpenOrdersResponse, error)
	// Get all account orders; active, canceled, or filled.
	AllOrders(ctx context.Context, in *AllOrdersRequest, opts ...grpc.CallOption) (*AllOrdersResponse, error)
	// Futures Account Balance
	FuturesAccountBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FuturesAccountBalanceResponse, error)
	// Position Information
	PositionInformation(ctx context.Context, in *PositionInformationRequest, opts ...grpc.CallOption) (*PositionInformationResponse, error)
}

type deliveryUserDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryUserDataServiceClient(cc grpc.ClientConnInterface) DeliveryUserDataServiceClient {
	return &deliveryUserDataServiceClient{cc}
}

func (c *deliveryUserDataServiceClient) GetOrderModifyHistory(ctx context.Context, in *GetOrderModifyHistoryRequest, opts ...grpc.CallOption) (*GetOrderModifyHistoryResponse, error) {
	out := new(GetOrderModifyHistoryResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryUserDataService/GetOrderModifyHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryUserDataServiceClient) QueryOrder(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error) {
	out := new(QueryOrderResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryUserDataService/QueryOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryUserDataServiceClient) GetPositionMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPositionModeResponse, error) {
	out := new(GetPositionModeResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryUserDataService/GetPositionMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryUserDataServiceClient) QueryCurrentOpenOrder(ctx context.Context, in *QueryCurrentOpenOrderRequest, opts ...grpc.CallOption) (*QueryCurrentOpenOrderResponse, error) {
	out := new(QueryCurrentOpenOrderResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryUserDataService/QueryCurrentOpenOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryUserDataServiceClient) CurrentAllOpenOrders(ctx context.Context, in *CurrentAllOpenOrdersRequest, opts ...grpc.CallOption) (*CurrentAllOpenOrdersResponse, error) {
	out := new(CurrentAllOpenOrdersResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryUserDataService/CurrentAllOpenOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryUserDataServiceClient) AllOrders(ctx context.Context, in *AllOrdersRequest, opts ...grpc.CallOption) (*AllOrdersResponse, error) {
	out := new(AllOrdersResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryUserDataService/AllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryUserDataServiceClient) FuturesAccountBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FuturesAccountBalanceResponse, error) {
	out := new(FuturesAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryUserDataService/FuturesAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryUserDataServiceClient) PositionInformation(ctx context.Context, in *PositionInformationRequest, opts ...grpc.CallOption) (*PositionInformationResponse, error) {
	out := new(PositionInformationResponse)
	err := c.cc.Invoke(ctx, "/services.delivery.v1.DeliveryUserDataService/PositionInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryUserDataServiceServer is the server API for DeliveryUserDataService service.
// All implementations should embed UnimplementedDeliveryUserDataServiceServer
// for forward compatibility
type DeliveryUserDataServiceServer interface {
	// Get order modification history
	GetOrderModifyHistory(context.Context, *GetOrderModifyHistoryRequest) (*GetOrderModifyHistoryResponse, error)
	// Check an order's status
	QueryOrder(context.Context, *QueryOrderRequest) (*QueryOrderResponse, error)
	// Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
	GetPositionMode(context.Context, *Empty) (*GetPositionModeResponse, error)
	// Query Current Open Order
	QueryCurrentOpenOrder(context.Context, *QueryCurrentOpenOrderRequest) (*QueryCurrentOpenOrderResponse, error)
	// Get all open orders on a symbol.
	// Careful when accessing this with no symbol.
	CurrentAllOpenOrders(context.Context, *CurrentAllOpenOrdersRequest) (*CurrentAllOpenOrdersResponse, error)
	// Get all account orders; active, canceled, or filled.
	AllOrders(context.Context, *AllOrdersRequest) (*AllOrdersResponse, error)
	// Futures Account Balance
	FuturesAccountBalance(context.Context, *Empty) (*FuturesAccountBalanceResponse, error)
	// Position Information
	PositionInformation(context.Context, *PositionInformationRequest) (*PositionInformationResponse, error)
}

// UnimplementedDeliveryUserDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeliveryUserDataServiceServer struct {
}

func (UnimplementedDeliveryUserDataServiceServer) GetOrderModifyHistory(context.Context, *GetOrderModifyHistoryRequest) (*GetOrderModifyHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderModifyHistory not implemented")
}
func (UnimplementedDeliveryUserDataServiceServer) QueryOrder(context.Context, *QueryOrderRequest) (*QueryOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrder not implemented")
}
func (UnimplementedDeliveryUserDataServiceServer) GetPositionMode(context.Context, *Empty) (*GetPositionModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionMode not implemented")
}
func (UnimplementedDeliveryUserDataServiceServer) QueryCurrentOpenOrder(context.Context, *QueryCurrentOpenOrderRequest) (*QueryCurrentOpenOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCurrentOpenOrder not implemented")
}
func (UnimplementedDeliveryUserDataServiceServer) CurrentAllOpenOrders(context.Context, *CurrentAllOpenOrdersRequest) (*CurrentAllOpenOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentAllOpenOrders not implemented")
}
func (UnimplementedDeliveryUserDataServiceServer) AllOrders(context.Context, *AllOrdersRequest) (*AllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllOrders not implemented")
}
func (UnimplementedDeliveryUserDataServiceServer) FuturesAccountBalance(context.Context, *Empty) (*FuturesAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuturesAccountBalance not implemented")
}
func (UnimplementedDeliveryUserDataServiceServer) PositionInformation(context.Context, *PositionInformationRequest) (*PositionInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionInformation not implemented")
}

// UnsafeDeliveryUserDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryUserDataServiceServer will
// result in compilation errors.
type UnsafeDeliveryUserDataServiceServer interface {
	mustEmbedUnimplementedDeliveryUserDataServiceServer()
}

func RegisterDeliveryUserDataServiceServer(s grpc.ServiceRegistrar, srv DeliveryUserDataServiceServer) {
	s.RegisterService(&DeliveryUserDataService_ServiceDesc, srv)
}

func _DeliveryUserDataService_GetOrderModifyHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderModifyHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryUserDataServiceServer).GetOrderModifyHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryUserDataService/GetOrderModifyHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryUserDataServiceServer).GetOrderModifyHistory(ctx, req.(*GetOrderModifyHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryUserDataService_QueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryUserDataServiceServer).QueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryUserDataService/QueryOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryUserDataServiceServer).QueryOrder(ctx, req.(*QueryOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryUserDataService_GetPositionMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryUserDataServiceServer).GetPositionMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryUserDataService/GetPositionMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryUserDataServiceServer).GetPositionMode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryUserDataService_QueryCurrentOpenOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentOpenOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryUserDataServiceServer).QueryCurrentOpenOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryUserDataService/QueryCurrentOpenOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryUserDataServiceServer).QueryCurrentOpenOrder(ctx, req.(*QueryCurrentOpenOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryUserDataService_CurrentAllOpenOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentAllOpenOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryUserDataServiceServer).CurrentAllOpenOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryUserDataService/CurrentAllOpenOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryUserDataServiceServer).CurrentAllOpenOrders(ctx, req.(*CurrentAllOpenOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryUserDataService_AllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryUserDataServiceServer).AllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryUserDataService/AllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryUserDataServiceServer).AllOrders(ctx, req.(*AllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryUserDataService_FuturesAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryUserDataServiceServer).FuturesAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryUserDataService/FuturesAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryUserDataServiceServer).FuturesAccountBalance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryUserDataService_PositionInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryUserDataServiceServer).PositionInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.delivery.v1.DeliveryUserDataService/PositionInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryUserDataServiceServer).PositionInformation(ctx, req.(*PositionInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryUserDataService_ServiceDesc is the grpc.ServiceDesc for DeliveryUserDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryUserDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.delivery.v1.DeliveryUserDataService",
	HandlerType: (*DeliveryUserDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderModifyHistory",
			Handler:    _DeliveryUserDataService_GetOrderModifyHistory_Handler,
		},
		{
			MethodName: "QueryOrder",
			Handler:    _DeliveryUserDataService_QueryOrder_Handler,
		},
		{
			MethodName: "GetPositionMode",
			Handler:    _DeliveryUserDataService_GetPositionMode_Handler,
		},
		{
			MethodName: "QueryCurrentOpenOrder",
			Handler:    _DeliveryUserDataService_QueryCurrentOpenOrder_Handler,
		},
		{
			MethodName: "CurrentAllOpenOrders",
			Handler:    _DeliveryUserDataService_CurrentAllOpenOrders_Handler,
		},
		{
			MethodName: "AllOrders",
			Handler:    _DeliveryUserDataService_AllOrders_Handler,
		},
		{
			MethodName: "FuturesAccountBalance",
			Handler:    _DeliveryUserDataService_FuturesAccountBalance_Handler,
		},
		{
			MethodName: "PositionInformation",
			Handler:    _DeliveryUserDataService_PositionInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/delivery/v1/user_data_service.proto",
}
